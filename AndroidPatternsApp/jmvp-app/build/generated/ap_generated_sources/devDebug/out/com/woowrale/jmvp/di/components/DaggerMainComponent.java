// Generated by Dagger (https://google.github.io/dagger).
package com.woowrale.jmvp.di.components;

import com.woowrale.jmvp.data.repository.ApiService;
import com.woowrale.jmvp.di.modules.MainModule;
import com.woowrale.jmvp.di.modules.ServicesModule;
import com.woowrale.jmvp.di.modules.ServicesModule_GetApiServiceFactory;
import com.woowrale.jmvp.ui.base.BaseActivity;
import com.woowrale.jmvp.ui.search.home.SearchActivity;
import com.woowrale.jmvp.ui.search.home.SearchActivity_MembersInjector;
import com.woowrale.jmvp.ui.search.home.SearchPresenter;
import com.woowrale.jmvp.ui.search.home.SearchPresenter_Factory;
import com.woowrale.jmvp.ui.search.local.LocalSearchActivity;
import com.woowrale.jmvp.ui.search.local.LocalSearchActivity_MembersInjector;
import com.woowrale.jmvp.ui.search.local.LocalSearchPresenter;
import com.woowrale.jmvp.ui.search.local.LocalSearchPresenter_Factory;
import com.woowrale.jmvp.ui.search.remote.RemoteSearchActivity;
import com.woowrale.jmvp.ui.search.remote.RemoteSearchActivity_MembersInjector;
import com.woowrale.jmvp.ui.search.remote.RemoteSearchPresenter;
import com.woowrale.jmvp.ui.search.remote.RemoteSearchPresenter_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerMainComponent implements MainComponent {
  private Provider<SearchPresenter> searchPresenterProvider;

  private Provider<ApiService> getApiServiceProvider;

  private Provider<LocalSearchPresenter> localSearchPresenterProvider;

  private Provider<RemoteSearchPresenter> remoteSearchPresenterProvider;

  private DaggerMainComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static MainComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.searchPresenterProvider = DoubleCheck.provider(SearchPresenter_Factory.create());
    this.getApiServiceProvider =
        DoubleCheck.provider(ServicesModule_GetApiServiceFactory.create(builder.servicesModule));
    this.localSearchPresenterProvider =
        DoubleCheck.provider(LocalSearchPresenter_Factory.create(getApiServiceProvider));
    this.remoteSearchPresenterProvider =
        DoubleCheck.provider(RemoteSearchPresenter_Factory.create(getApiServiceProvider));
  }

  @Override
  public void inject(BaseActivity activity) {}

  @Override
  public void inject(SearchActivity activity) {
    injectSearchActivity(activity);
  }

  @Override
  public void inject(LocalSearchActivity activity) {
    injectLocalSearchActivity(activity);
  }

  @Override
  public void inject(RemoteSearchActivity activity) {
    injectRemoteSearchActivity(activity);
  }

  private SearchActivity injectSearchActivity(SearchActivity instance) {
    SearchActivity_MembersInjector.injectMPresenter(instance, searchPresenterProvider.get());
    return instance;
  }

  private LocalSearchActivity injectLocalSearchActivity(LocalSearchActivity instance) {
    LocalSearchActivity_MembersInjector.injectMPresenter(
        instance, localSearchPresenterProvider.get());
    return instance;
  }

  private RemoteSearchActivity injectRemoteSearchActivity(RemoteSearchActivity instance) {
    RemoteSearchActivity_MembersInjector.injectMPresenter(
        instance, remoteSearchPresenterProvider.get());
    return instance;
  }

  public static final class Builder {
    private ServicesModule servicesModule;

    private Builder() {}

    public MainComponent build() {
      if (servicesModule == null) {
        this.servicesModule = new ServicesModule();
      }
      return new DaggerMainComponent(this);
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder mainModule(MainModule mainModule) {
      Preconditions.checkNotNull(mainModule);
      return this;
    }

    public Builder servicesModule(ServicesModule servicesModule) {
      this.servicesModule = Preconditions.checkNotNull(servicesModule);
      return this;
    }
  }
}
